name: CI
on:
  pull_request:
    branches: [develop, main]
  push:
    branches: [develop, main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Use NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os  }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os  }}-node-
      - run: npm ci
      - run: npm run format:check
      - run: npm test -- --coverage
        env:
          CI: true
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: coverage
      - name: Build Project
        if: github.event_name == 'push'
        run: npm run build
      - name: Upload Build Folder
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
      - name: ZIP Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      - name: Create a Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain cheap-kittens.surge.sh
      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npx surge --project ./build --domain sweltering-boys.surge.sh
      - name: Upload Coverage Reports
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  report_new_dependencies:
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
    steps:
      # - name: Check for new dependencies
      #   uses: hiwelo/new-dependencies-action@1.0.1
      #   with:
      #     token: ${{ secrets.OKP4_TOKEN }}
      #     pull_number: ${{ github.event.pull_request.number }}
      - name: "Deps: show dependencies metadata"
        uses: lirantal/github-action-new-dependencies-advisor@v1.1.1
        id: check_for_new_dependencies
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: New dependencies output
        run: |
          echo "NEW DEPENDENCIES"
          echo "${{ toJSON(steps.check_for_new_dependencies) }}"
